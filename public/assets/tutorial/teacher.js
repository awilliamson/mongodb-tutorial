function help(){$("#results").html('<div id="help"><p>'+teacher.currentStep.help()+"</p><br/><br/>or<br/><br/><p>Type <strong>reset</strong> to revert any changes you've made to the data for this step.</p><p>Type <strong>restart</strong> to start this tutorial over</p><p><strong>lesson(X)</strong> to jump to lesson # X</p><p><strong>ctrl-,</strong> to slow things down</p><p><strong>ctrl-.</strong> to speed things up</p><p>You can also click the speed button in the upper right to change the speed<p></div>")}function reset(){lesson(teacher.currentStep.index)}function restart(){lesson(0)}function lesson(step){with(window)var targetStep=eval("teacher.step"+step);targetStep&&(teacher.interval&&clearInterval(teacher.interval),teacher.timeout&&clearTimeout(teacher.timeout),$.get("/tutorial/reset?index="+step,null,function(){teacher.start(step)}))}Object.size=function(e){var t,n=0;for(t in e)e.hasOwnProperty(t)&&++n;return n};var teacher={currentStep:null,speeds:[2,1.5,1.25,1,.75,.5,.25,.1],speedIndex:2,input:null,$input:null,start:function(step){if(teacher.input=document.getElementById("input"),teacher.$input=$(teacher.input),step)with(window)return eval("teacher.step(teacher.step"+step+");");else teacher.step(teacher.step0)},got:function(e,t){teacher.currentStep.finish(e,t)},step:function(e){return teacher.$input.css({backgroundColor:""}),$("#lesson").text("lesson: "+e.index),e.start(),teacher.currentStep=e,null},wrong:function(){return $("#history").inputHistory({command:"add",type:"teach",html:"That's not quite right. Enter <strong>help</strong> if you are stuck"}),null},speedUp:function(){teacher.changeSpeed(teacher.speedIndex+1)},slowDown:function(){teacher.changeSpeed(teacher.speedIndex-1)},changeSpeed:function(e){e<teacher.speeds.length&&e>-1&&(teacher.speedIndex=e,$("#speed").text("speed "+e),clearTimeout(teacher.timeout),teacher.say(teacher.currentLecture,teacher.currentCallback,teacher.currentIndex))},canExecute:function(e){return e.teacherName&&"find"==e.teacherName()?!0:teacher.currentStep.canExecute&&!teacher.currentStep.canExecute(e)?(teacher.wrong(),!1):!0},isId:function(e,t,n){return e&&e[t]&&e[t].$oid&&e[t].$oid==n},say:function(e,t,n){n||(n=0),n>=e.length||(teacher.currentIndex=n,teacher.currentLecture=e,teacher.currentCallback=t,teacher.timeout=setTimeout(function(){$("#history").inputHistory({command:"add",type:"teach",html:e[n++][1]}),n<e.length?teacher.say(e,t,n):t&&t()},(0==n?0:e[n-1][0])*teacher.speeds[teacher.speedIndex]))},commandFor:function(e,t,n){return e&&e.teacherName&&e.teacherName()==t&&e._collection._name==n},blockInput:function(){teacher.input.disabled=!0},unblockInput:function(){teacher.input.disabled=!1},waitingAnswer:function(){teacher.$input.css({backgroundColor:"#efe"}).focus()}};teacher.step0={index:0,start:function(){teacher.say([[4e3,"Welcome to a quick 15 minute interactive MongoDB tutorial. In this tutorial you'll learn the basics about working with MongoDB"],[3500,"At any point, you can get help by entering <strong>help</strong>"],[4500,'I also wrote a free ebook you might be interested in: <a href="http://openmymind.net/2011/3/28/The-Little-MongoDB-Book" target="_blank">The Little MongoDB Book</a>'],[2e3,"Let's start"],[4e3,"A MongoDB database is made up of <em>collections</em>. You can think of <em>collections</em> as <em>tables</em> from relational databases"],[3500,"Let's ask the database, identified by the <em>db</em> object, to list all of its collections"],[10,"It's easy, just enter <em>db.getCollectionNames();</em>"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.getCollectionNames();</strong>"},finish:function(e){return"unicorns"==e[0]?teacher.step(teacher.step1):teacher.wrong()}},teacher.step1={index:1,start:function(){teacher.say([[3e3,"Great work. So we have a collection of unicorns, eh?"],[5e3,"MongoDB has a number of database commands, but we'll mostly focus on collection commands"],[5e3,"Collection commands are executed via <em>db.COLLECTION_NAME.COMMAND()</em>"],[3e3,"Can you guess how to retrieve a <em>count</em> of <em>unicorns</em>?"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.count();</strong>"},finish:function(){var e=$("#results").text();return"0 documents in unicorns"==e&&(top.location="http://www.thinkgeek.com/caffeine/wacky-edibles/e5a7/"),/documents? in unicorns$/.test(e)?teacher.step(teacher.step2):teacher.wrong()}},teacher.step2={index:2,start:function(){teacher.say([[4e3,"Most excellent! All our unicorns are accounted for"],[5e3,"If you are going to work with unicorns, you have to get to know them"],[4e3,"Use the <em>find</em> command to retrive the information on our <em>unicorns</em>"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.find();</strong>"},finish:function(e,t){return t&&t.teacherName&&"find"==t.teacherName()&&"unicorns"==t._collection._name?teacher.step(teacher.step3):teacher.wrong()}},teacher.step3={index:3,start:function(){teacher.say([[3e3,"There's a lot of information here"],[4e3,"First, each row is called a <em>document</em>, each column a <em>field</em>"],[7e3,"Every document has an <em>_id</em> field. You can use whatever unique value you want. We are using the default type (which conveniently has a timestamp embedded in it!)"],[6e3,"We can filter our results by specifying a <em>selector</em> as the first parameter to <em>find</em>"],[7e3,"A selector is a json object. If we wanted to find a unicorn named 'leto', we'd specify <em>{name: 'leto'}</em> as our first parameter"],[4e3,"Can you find all female unicorns?"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.find({gender: 'f'});</strong>"},finish:function(e,t){return teacher.commandFor(t,"find","unicorns")&&t._selector&&"f"==t._selector.gender&&1==Object.size(t._selector)?teacher.step(teacher.step4):teacher.wrong()}},teacher.step4={index:4,start:function(){teacher.say([[1e3,"Nice"],[5e3,"There are many conditional operators, such as <em>$lt</em> (less than) and <em>$gte</em> (greater than or equal)"],[6e3,"We could find all unicorns with less than 100 vampire kills using <em>{vampires: {$lt: 100}}</em>"],[8e3,"This is a tricky one but...can you <em>find</em> all male unicorns that weigh over 600 lbs?"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.find({gender: 'm', weight: {$gt: 600}});</strong>"},finish:function(e,t){return teacher.commandFor(t,"find","unicorns")&&t._selector&&"m"==t._selector.gender&&t._selector.weight&&600==t._selector.weight.$gt&&2==Object.size(t._selector)?teacher.step(teacher.step5):teacher.commandFor(t,"find","unicorns")&&t._selector&&"m"==t._selector.gender&&t._selector.weight&&601==t._selector.weight.$gte&&2==Object.size(t._selector)?(teacher.say([[2e3,"Right, but you have to be difficult, don't you?"]]),teacher.step(teacher.step5)):teacher.wrong()}},teacher.step5={index:5,start:function(){teacher.say([[4e3,"Great work! <em>find</em> takes a 2nd argument: the fields to return"],[5e3,"So if we only wanted names and weight, we could pass <em>{name: 1, weight:1}</em>"],[6e3,"Go ahead and try, <em>find</em> all unicorns <em>names</em> and <em>weight</em> (using <em>{}</em> or <em>null</em> as the first parameter)"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.find(null, {name: 1, weight:1});</strong>"},finish:function(e,t){return teacher.commandFor(t,"find","unicorns")&&(null==t._selector||0==Object.size(t._selector))&&t._fields&&1==t._fields.name&&1==t._fields.weight&&2==Object.size(t._fields)?teacher.step(teacher.step6):teacher.wrong()}},teacher.step6={index:6,start:function(){teacher.say([[4e3,"Even if you don't specify it, the <em>_id</em> is always returned"],[4e3,"Speaking of <em>_id</em>, it's of type <em>ObjectId</em>"],[5e3,"You can select by <em>ObjectId</em> using <em>{field: ObjectId('XYZ')}</em>"],[3e3,"Let's do something more interesting though"],[8e3,"<em>find</em>'s execution is delayed until necessary, which means we can chain methods, such as <em>sort</em>, <em>limit</em>, <em>skip</em> and <em>explain</em>"],[8e3,"So we could sort by name and age using <em>db.unicorns.find().sort({name:1, age:-1})</em>. 1 is for ascending, -1 for descending"],[5e3,"Or limit our results to 5 documents using <em>db.unicorns.find().limit(5)</em>"],[7e3,"Here's a tricky one: get only the names of the 2nd and 3rd heaviest male unicorns"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.find({gender: 'm'}, {name: 1}).sort({weight:-1}).limit(2).skip(1);</strong>"},finish:function(e,t){return teacher.commandFor(t,"find","unicorns")&&t._selector&&"m"==t._selector.gender&&1==Object.size(t._selector)&&t._fields&&1==t._fields.name&&(1==Object.size(t._fields)||2==Object.size(t._fields)&&0==t._fields._id)&&t._sort&&-1==t._sort.weight&&1==Object.size(t._sort)&&2==t._limit&&1==t._skip?teacher.step(teacher.step7):teacher.wrong()}},teacher.step7={index:7,start:function(){teacher.say([[3e3,"You have just BLOWN my mind"],[6e3,"The <em>selector</em> parameter that you pass to <em>find</em> can be used in a number of places"],[3e3,"For example, we can use it with <em>count</em>"],[4e3,"How many unicorns weigh less than 600 lbs?"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.count({weight: {$lt: 600}});</strong>"},finish:function(e,t){return teacher.commandFor(t,"count","unicorns")&&t._selector&&t._selector.weight&&600==t._selector.weight.$lt&&1==Object.size(t._selector)?teacher.step(teacher.step8):teacher.commandFor(t,"count","unicorns")&&t._selector&&t._selector.weight&&599==t._selector.weight.$lte&&1==Object.size(t._selector)?(teacher.say([[2e3,"Technically you're wrong, but whatever"]]),teacher.step(teacher.step8)):teacher.wrong()}},teacher.step8={index:8,start:function(){teacher.say([[7e3,"That's right! So far we've only looked at getting data from MongoDB, but once you understand that, you're half way through the basics"],[5e3,"You should know that we're looking at the most basic way developers interact with MongoDB"],[5e3,"Most frameworks have libraries which wrap all of this into something more natural"],[6e3,"For example, Rails developers get implementations which follow ActiveRecord, and .NET developers get LINQ implementation"],[5e3,"But it's always good to understand the fundamentals, so let's move on to some other commands"],[6e3,"Remember, you can always skip to this next lesson by entering <strong>lesson(9);</strong>, so close your browser and take a longer break if you want"]],function(){teacher.step(teacher.step9)})},help:function(){return"There's nothing to do. You can always enter <strong>lesson(9);</strong> to skip this"},finish:function(){teacher.step(teacher.step9)}},teacher.step9={index:9,start:function(){teacher.say([[3e3,"All of our data is very structured: every document has the same fields"],[2e3,"But in MongoDB this isn't a requirement"],[7e3,"A new unicorn was just born, but all we know is its name <em>Lois</em>, gender <em>f</em> and that it has <em>0</em> vampire kills"],[4e3,"Since we don't have an exact DOB or weight, we'll leave that data out for now"],[4e3,"The <em>insert</em> command is used to add new documents to a collection"],[4e3,"It takes a single argument: the json object we want to insert. Go ahead and try"]],teacher.waitingAnswer)},canExecute:function(e){return teacher.step9.isValid(e)},help:function(){return"Enter <strong>db.unicorns.insert({name: 'Lois', gender: 'f', vampires:0});</strong>"},finish:function(e,t){return teacher.step9.isValid(t)?(teacher.step9.loisId=e.$oid,teacher.step(teacher.step10)):teacher.wrong()},getLoisId:function(){return teacher.step9.loisId||executor.sendCommand(db.unicorns.find({name:"Lois"},{_id:!0}),function(e){teacher.step9.loisId=e.documents[0]._id.$oid},function(){},!1),teacher.step9.loisId||executor.sendCommand(db.unicorns.find({weight:55},{_id:!0}),function(e){teacher.step9.loisId=e.documents[0]._id.$oid},function(){},!1),teacher.step9.loisId},isValid:function(e){return teacher.commandFor(e,"insert","unicorns")&&e._object&&"Lois"==e._object.name&&"f"==e._object.gender&&0===e._object.vampires&&3==Object.size(e._object)}},teacher.step10={index:10,start:function(){teacher.say([[1e3,"Let's look at the result"]],teacher.step10.alpha)},help:function(){return"there should be nothing to do"},alpha:function(){executor.rawExecute("db.unicorns.find({name: 'Lois'});")},finish:function(){teacher.step(teacher.step11)}},teacher.step11={index:11,start:function(){teacher.say([[7e3,"The conditional <em>$exists</em> operator can be used to find documents by the presence (or lack) of fields, like so: <em>{weight: {$exists: true}}</em>"],[5e3,"We just got word that Lois weighs a healthy 55 pounds. Let's see about updating her record"],[6e3,"The <em>update</em> command takes at least 2 parameter: the selector we want to update, and the updated value"],[7e3,"We could select the Lois document a couple different ways, but let's go by id, using <em>{_id: ObjectId('"+teacher.step9.getLoisId()+"')}</em> as the first argument"],[5e3,"For our second argument we'll simply try setting <em>{weight: 55}</strong>. Go ahead and try"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.update({_id: ObjectId('"+teacher.step9.getLoisId()+"')}, {weight:55});</strong>"},canExecute:function(e){return teacher.step11.isValid(e)},finish:function(e,t){return teacher.step11.isValid(t)?teacher.step(teacher.step12):teacher.wrong()},isValid:function(e){return teacher.commandFor(e,"update","unicorns")&&teacher.isId(e._selector,"_id",teacher.step9.getLoisId())&&1==Object.size(e._selector)&&e._values&&55==e._values.weight&&1==Object.size(e._values)}},teacher.step12={index:12,start:function(){teacher.say([[1e3,"Let's look at the result"]],teacher.step12.alpha)},help:function(){return"there should be nothing to do"},alpha:function(){executor.rawExecute("db.unicorns.find({weight: 55});")},finish:function(){teacher.step(teacher.step13)}},teacher.step13={index:13,start:function(){teacher.say([[4e3,"Well, something's not right, we lost the name, gender and vampire kill counter"],[5e3,"Ah, right, it turns out that <em>update</em> updates the entire document with the new value"],[6e3,"To update a single field, we either specify the entire document again, or use the <em>$set</em> operator"],[5e3,"Let's fix our mistake by doing another update and using <em>$set</em> for the removed fields"],[6e3,"So, we'll do <em>db.unicorns.update({_id: ObjectId('"+teacher.step9.getLoisId()+"')}, {$set: {name: 'Lois', ...}});</em>"],[3e3,"Go ahead, figure out the rest"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.update({_id: ObjectId('"+teacher.step9.getLoisId()+"')}, {$set: {name: 'Lois', gender: 'f', vampires: 0}});</strong>"},canExecute:function(e){return teacher.step13.isValid(e)},finish:function(e,t){return teacher.step13.isValid(t)?teacher.step(teacher.step14):teacher.wrong()},isValid:function(e){return teacher.commandFor(e,"update","unicorns")&&teacher.isId(e._selector,"_id",teacher.step9.getLoisId())&&1==Object.size(e._selector)&&e._values&&e._values.$set&&"Lois"==e._values.$set.name&&"f"==e._values.$set.gender&&0==e._values.$set.vampires&&1==Object.size(e._values)}},teacher.step14={index:14,start:function(){teacher.say([[6e3,"Perfect. You'll be glad to know that MongoDB is able to do an <em>upsert</em>, by setting the optional 3rd parameter to true"],[5e3,"An upsert will either update the document if found or it'll insert it"],[6e3,"Upserts are particularly powerful with some of the atomic operators like <em>$inc</em> and <em>$push</em>"],[2e3,"Let's try it out quickly"],[7e3,"Do an <em>update</em> with a selector of <em>{name: 'Ulysee'}</em> a value of <em>{$inc: {vampires: 1}}</em> and the 3rd parameter (upsert) set to <em>true</em>"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.update({name: 'Ulysee'}, {$inc: {vampires: 1}}, true);</strong>"},canExecute:function(e){return teacher.step14.isValid(e)},finish:function(e,t){return teacher.step14.isValid(t)?teacher.step(teacher.step15):teacher.wrong()},isValid:function(e){return teacher.commandFor(e,"update","unicorns")&&e._selector&&"Ulysee"==e._selector.name&&1==Object.size(e._selector)&&e._values&&e._values.$inc&&1==e._values.$inc.vampires&&1==Object.size(e._values)}},teacher.step15={index:15,start:function(){teacher.say([[1e3,"Let's look at the result"]],teacher.step15.alpha)},help:function(){return"There should be nothing to do"},alpha:function(){executor.rawExecute("db.unicorns.find({name: 'Ulysee'});")},finish:function(){return teacher.step(teacher.step16)}},teacher.step16={index:16,start:function(){teacher.say([[3e3,"Notice how a new document for Ulysee was added"],[2e3,"Now, execute the same command"]],teacher.waitingAnswer)},canExecute:function(e){return teacher.step16.isValid(e)},help:function(){return"Enter <strong>db.unicorns.update({name: 'Ulysee'}, {$inc: {vampires: 1}}, true);</strong>"},finish:function(e,t){return teacher.step16.isValid(t)?teacher.step(teacher.step17):teacher.wrong()},isValid:function(e){return teacher.commandFor(e,"update","unicorns")&&e._selector&&"Ulysee"==e._selector.name&&1==Object.size(e._selector)&&e._values&&e._values.$inc&&1==e._values.$inc.vampires&&1==Object.size(e._values)}},teacher.step17={index:17,start:function(){teacher.say([[1e3,"Again, let's look at the result"]],teacher.step17.alpha)},alpha:function(){executor.rawExecute("db.unicorns.find({name: 'Ulysee'});")},help:function(){return"There should be nothing to do"},finish:function(){return teacher.step(teacher.step18)}},teacher.step18={index:18,start:function(){teacher.say([[3e3,"Notice that rather than inserting a new document, the existing one was updated"],[2e3,"Update has a 4th parameter which is rather peculiar"],[4e3,"By default, update will only update a single document, even if the selector matches multiple documents"],[5e3,"To change this, we pass <em>true</em> as our forth parameter to allow multiple updates"],[6e3,"Let's try it by using the <em>$push</em> operator to add <em>orange</em> as a food all <em>male</em> unicorns love"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.update({gender: 'm'}, {$push: {loves: 'orange'}}, false, true);</strong>"},finish:function(e,t){return teacher.step18.isValid(t)?teacher.step(teacher.step19):teacher.wrong()},canExecute:function(e){return teacher.step18.isValid(e)},isValid:function(e){return teacher.commandFor(e,"update","unicorns")&&e._selector&&"m"==e._selector.gender&&1==Object.size(e._selector)&&e._values&&e._values.$push&&"orange"==e._values.$push.loves&&1==Object.size(e._values)&&1==e._multiple}},teacher.step19={index:19,start:function(){teacher.say([[1e3,"Perfect"],[2500,"The last command we'll look at is <em>remove</em>"],[5e3,"Remove is easy, it takes a single optional parameter: the <em>selector</em> which determines which documents to remove"],[3e3,"Passing null or an empty selector removes all documents"],[3e3,"Go ahead and remove whichever unicorn displeases you most"]],teacher.waitingAnswer)},help:function(){return"Enter <strong>db.unicorns.remove({name: 'Kenny'});</strong>"},finish:function(e,t){return teacher.step19.isValid(t)?((null==t._selector||0==Object.size(t._selector))&&teacher.say([[1e3,"Ohh...tough guy"]]),teacher.step(teacher.step20)):teacher.wrong()},canExecute:function(e){return teacher.step19.isValid(e)},isValid:function(e){return teacher.commandFor(e,"remove","unicorns")}},teacher.step20={index:20,start:function(){teacher.say([[1e3,"Bravo!"],[3e3,"Hopefully you learnt something about MongoDB and Unicorns"],[5e3,"There's a lot we didn't cover, like embedded documents, aggregation, indexes, management, etc"],[4e3,"But the idea was to help get you confortable with the basics "],[4e3,"Feel free to play around, insert new data, new combinations, and what not"],[6e3,'Or, better yet, head over to <a href="http://www.mongodb.org/downloads">the mongodb download</a> page, grab the version for your OS and experiment on your local machine'],[5e3,"The precompiled binaries available for Linux, Windows and OS X make MongoDB extremely easy to get started with"],[4500,'Don\'t forget to check out my <a href="http://openmymind.net/2011/3/28/The-Little-MongoDB-Book" target="_blank">free MongoDB ebook</a>'],[1e3,"You are now web scale"]],teacher.waitingAnswer)},help:function(){return"Well done, you are finished!"},finish:function(){}},$(document).keydown(function(e){e.ctrlKey&&190==e.which?teacher.speedUp():e.ctrlKey&&188==e.which&&teacher.slowDown()});